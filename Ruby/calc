#!/usr/bin/ruby

require 'FileUtils'
require 'stringio'
require 'set'

class Compiler
    TABL = "\t"
    
    @@buffer = ""
    @@compile_flag = true
    
    def self.write(line)
        @@buffer += line + "\n"
    end

    def self.open()
        write("main:" + TABL + "sp := 6")
        write(TABL + "one  := 1")
        write(TABL + "three  := 3")
        write(TABL + "sp := sp + one")
    end

    def self.init(bin)
        if !bin
            write(TABL + "sp := sp + one")
        else
            write(TABL + "sp := sp + three")
        end
    end

    def self.prepare()
        write(TABL + "sp := sp - three")
        write(TABL + "tmp := M[sp + 3]")
        write(TABL + "M[sp + 1] := tmp")
        write(TABL + "sp := sp + three")
    end

    def self.operate(operation)
        write(TABL + "sp := sp - three")
        write(TABL + "tmp := M[sp + 3]")
        write(TABL + "M[sp + 2] := tmp")
        write(TABL + "tmp := M[sp + 1]")
        write(TABL + "tmp2 := M[sp + 2]")
        write(TABL + "tmp := tmp " + operation + " tmp2")
        write(TABL + "M[sp + 0] := tmp")
    end

    def self.pushKeyword(key)
        if key == "S" then
            write(TABL + "sp := sp - one")
            write(TABL + "tmp := M[sp + 1]")
            write(TABL + "M[sp + 0] := tmp")
            write(TABL + "mem := tmp")
        elsif key == "R" then
            write(TABL + "M[sp + 0]:= mem")
        else
            # ERROR
        end
    end

    def self.negate()
        write(TABL + "tmp2 := 0")
        write(TABL + "tmp := tmp2 - tmp")
        write(TABL + "M[sp + 0] := tmp")
    end

    def self.push(number)
        write(TABL + "tmp := " + number.to_s)
        write(TABL + "M[sp + 0] := tmp")
    end

    def self.error()
        @@compile_flag = false
    end

    def self.compile(filename)
        write(TABL + "sp := sp - one")
        write(TABL + "tmp := M[sp + 1]")
        write(TABL + "writeInt(tmp)")
        write(TABL + "halt")
        write("equ tmp   M[0]")
        write("equ tmp2  M[1]")
        write("equ one   M[2]")
        write("equ three M[3]")
        write("equ mem   M[4]")
        write("equ sp    M[5]")
        write("equ stack M[6]")
        if @@compile_flag then
            file = File.new(filename, "w")
            file.write(@@buffer)
            file.close()
            
            return true
        else
            return false
        end
    end
end

class Token
    attr_reader :type, :line, :col
    
    def initialize(type,lineNum,colNum)
        @type = type
        @line = lineNum
        @col = colNum
    end
end

class LexicalToken < Token
    attr_reader :lex
    
    def initialize(type,lex,lineNum,colNum)
        super(type,lineNum,colNum)
        
        @lex = lex
    end
end

class Scanner
    def initialize(inStream)
        @istream = inStream
        @keywords = Set.new(["S","R"])
        @lineCount = 1
        @colCount = -1
        @needToken = true
        @lastToken = nil
    end
    
    def putBackToken()
        @needToken = false
    end
    
    def getToken()
        if !@needToken
            @needToken = true
            return @lastToken
        end
        
        state = 0
        foundOne = false
        c = @istream.getc()
        
        if @istream.eof() then
            @lastToken = Token.new(:eof,@lineCount,@colCount)
            return @lastToken
        end
        
        while !foundOne
            @colCount = @colCount + 1
            case state
                when 0
                lex = ""
                column = @colCount
                line = @lineCount
                if isLetter(c) then state=1
                elsif isDigit(c) then state=2
                elsif c == ?+ then state = 3
                elsif c == ?- then state = 4
                elsif c == ?* then state = 5
                elsif c == ?/ then state = 6
                elsif c == ?( then state = 7
                elsif c == ?) then state = 8
                elsif c == ?\n then
                    @colCount = -1
                    @lineCount = @lineCount + 1
                elsif isWhiteSpace(c) then state = state #ignore whitespace
                elsif @istream.eof() then
                    @foundOne = true
                    type = :eof
                elsif c == ?% then state = 9
                else
                #puts "Unrecognized Token found at line ",line," and column ",column,"\n"
                    Compiler::error()
                    raise "Unrecognized Token"
                end
                
                when 1
                if isLetter(c) or isDigit(c) then state = 1
                    else
                    if @keywords.include?(lex) then
                        foundOne = true
                        type = :keyword
                        else
                        foundOne = true
                        type = :identifier
                    end
                end
                when 2
                if isDigit(c) then state = 2
                    else
                    type = :number
                    foundOne = true
                end
                when 3
                type = :add
                foundOne = true
                when 4
                type = :sub
                foundOne = true
                when 5
                type = :times
                foundOne = true
                when 6
                type = :divide
                foundOne = true
                when 7
                type = :lparen
                foundOne = true
                when 8
                type = :rparen
                foundOne = true
                when 9
                type = :mod
                foundOne = true
            end
            
            if !foundOne then
                lex.concat(c)
                c = @istream.getc()
            end
            
        end
        
        @istream.ungetc(c)
        @colCount = @colCount - 1
        if type == :number or type == :identifier or type == :keyword then
            t = LexicalToken.new(type,lex,line,column)
            else
            t = Token.new(type,line,column)
        end
        
        @lastToken = t
        return t
    end
    
    private
	def isLetter(c)
        return ((?a <= c and c <= ?z) or (?A <= c and c <= ?Z))
	end
    
	def isDigit(c)
        return (?0 <= c and c <= ?9)
	end
    
	def isWhiteSpace(c)
        return (c == ?\  or c == ?\n or c == ?\t)
	end
end

class BinaryNode
    attr_reader :left, :right
    
    def initialize(left,right)
        @left = left
        @right = right
    end
end

class UnaryNode
    attr_reader :subTree
    
    def initialize(subTree)
        @subTree = subTree
    end
end

class AddNode < BinaryNode
    def initialize(left, right)
        super(left,right)
    end
    
    def evaluate()
        Compiler::init(true)
        left = @left.evaluate()
        Compiler::prepare()
        right = @right.evaluate()
        Compiler::operate("+")
        return left + right
    end
end

class SubNode < BinaryNode
    def initialize(left, right)
        super(left,right)
    end
    
    def evaluate()
        Compiler::init(true)
        left = @left.evaluate()
        Compiler::prepare()
        right = @right.evaluate()
        Compiler::operate("-")
        return left - right
    end
end

class MultNode < BinaryNode
    def initialize(left, right)
        super(left,right)
    end
    
    def evaluate()
        Compiler::init(true)
        left = @left.evaluate()
        Compiler::prepare()
        right = @right.evaluate()
        Compiler::operate("*")
        return left * right
    end
end

class DivNode < BinaryNode
    def initialize(left, right)
        super(left,right)
    end
    
    def evaluate()
        Compiler::init(true)
        left = @left.evaluate()
        Compiler::prepare()
        right = @right.evaluate()
        Compiler::operate("/")
        return left / right
    end
end

class ModNode < BinaryNode
    def initialize(left, right)
        super(left, right)
    end
    
    def evaluate()
        Compiler::init(true)
        left = @left.evaluate()
        Compiler::prepare()
        right = @right.evaluate()
        Compiler::operate("%")
        return left % right
    end
end

class NumNode
    def initialize(num)
        @num = num
    end
    
    def evaluate()
        Compiler::push(@num)
        return @num
    end
end

class StoreNode < UnaryNode
    def initialize(subTree)
        super(subTree)
    end
    
    def evaluate()
        Compiler::init(false)
        $calc.memory = @subTree.evaluate()
        
        Compiler::pushKeyword("S")
        return $calc.memory
    end
end

class NegateNode < UnaryNode
    def initialize(subTree)
        super(subTree)
    end
    
    def evaluate()
        ret = @subTree.evaluate()
        Compiler::negate()
        return - ret
    end
end

class RecallNode
    def initialize() ; end
    
    def evaluate()
        ret = $calc.memory
        Compiler::pushKeyword("R")
        return ret
    end
end

class Parser
    def initialize(istream)
        @scan = Scanner.new(istream)
    end
    
    def parse()
        return Prog()
    end
    
    private
    def Prog()
        result = Expr()
        t = @scan.getToken()
        
        if t.type != :eof then
            Compiler::error()
            print "Expected EOF. Found ", t.type, ".\n"
            raise "Parse Error"
        end
        
        return result
    end
    
    def Expr()
        return RestExpr(Term())
    end
    
    def RestExpr(e)
        t = @scan.getToken()
        
        if t.type == :add then
            return RestExpr(AddNode.new(e,Term()))
        end
        
        if t.type == :sub then
            return RestExpr(SubNode.new(e,Term()))
        end
        
        @scan.putBackToken()
        
        return e
    end
    
    def Term()
        return RestTerm(Storable())
    end
    
    def RestTerm(e)
        t = @scan.getToken()
        
        if t.type == :times then
            return RestTerm(MultNode.new(e,Storable()))
        end
        
        if t.type == :divide then
            return RestTerm(DivNode.new(e,Storable()))
        end
        
        if t.type == :mod then
            return RestTerm(ModNode.new(e, Storable()))
        end
        
        @scan.putBackToken()
        
        return e
    end
    
    def Storable()
        ast = Negate()
        t = @scan.getToken()
        
        if t.type == :keyword
            if t.lex == "S"
                return StoreNode.new(ast)
            else
                Compiler::error()
                raise "Parser Error: Expected S"
            end
        end
        
        @scan.putBackToken()
        
        return ast
    end
    
    def Negate()
        t = @scan.getToken()
        
        if t.type == :sub then
            return NegateNode.new(Factor())
        end
        
        @scan.putBackToken()
        return Factor()
    end
    
    def Factor()
        t = @scan.getToken()
        
        if t.type == :number
            return NumNode.new(t.lex.to_i)
        else if t.type == :keyword
            if t.lex == "R"
                return RecallNode.new
            else
                Compiler::error()
                raise "Parse Error: Expected R"
            end
        else if t.type == :lparen
            ast = Expr()
            t = @scan.getToken()
            
            if t.type != :rparen
                Compiler::error()
                raise "Parser Error: Expected )";
            end
            
            return ast
        end
        
        Compiler::error()
        raise "Parser Error: Expected Number, R or ("
    end
end
end

class Calculator
	attr_reader :memory
	attr_writer :memory
	
	def initialize()
        @memory = 0
	end
	
	def eval(expr)
		parser = Parser.new(StringIO.new(expr))
		ast = parser.parse()
        return ast.evaluate()
	end
end

if ARGV.size == 0
    option="no"
    elsif ARGV.size == 1
    option=ARGV.shift
end

$calc = Calculator.new()

if option == "-i"
    print "> "
    
    while expr = gets
        begin
            puts "= " + $calc.eval(expr).to_s
        rescue Exception => e
            print "* "
            puts e.message()
        end
        
        print "> "
    end
elsif option == "-c"
    begin
        begin
            FileUtils::rm("a.ewe")
            puts " --> Remove previous files [OK]"
        rescue
            puts " --> Remove file: a.ewe [NOT FOUND]"
        end
        
        print "Escriba una expresion: "
        expr = gets
        
        Compiler::open()
        
        result = $calc.eval(expr)
        
        if Compiler::compile("a.ewe") then
            puts " --> Compile: OK"
            puts " --> Output: a.ewe"
            puts " --> Result: " + result.to_s
        end
    rescue Exception => e
        puts " --> Compile: FAIL"
        puts " --> Output: N/A"
        puts " --> [ERROR] " + e.message()
    end
    
elsif option == "no"
    print "Escriba una expresion: "
    expr = gets
    
    begin
        puts "The result is " + $calc.eval(expr).to_s
    rescue Exception => e
        puts e.message()
    end
else
    puts "ERROR: Unknown argument use:"
    puts " [-i  ] Interactive mode."
    puts " [-c  ] Compiler mode."
    puts " [void] Normal mode."
end

end